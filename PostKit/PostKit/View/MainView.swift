//
//  MainView.swift
//  PostKit
//
//  Created by ÍπÄÎã§Îπà on 10/11/23.
//

import SwiftUI
import CoreData

struct MainView: View {
    @AppStorage("_cafeName") var cafeName: String = ""
    @AppStorage("_isFirstLaunching") var isFirstLaunching: Bool = true
    @EnvironmentObject var appstorageManager: AppstorageManager
    @EnvironmentObject var pathManager: PathManager
    @ObservedObject var viewModel = ChatGptViewModel.shared
    @State var historySelected = "ÌîºÎìú Í∏Ä"
    //CoreData Manager
    let coreDataManager = CoreDataManager.instance
    
    //CoreData ÏûÑÏãú Class
    @StateObject var storeModel = StoreModel( _storeName: "", _tone: ["Í∏∞Î≥∏"])
    
    
    var body: some View {
        ZStack {
            if isFirstLaunching == true {
                OnboardingView( isFirstLaunching: $isFirstLaunching, storeModel: storeModel)
            }
            else {
                NavigationStack(path: $pathManager.path) {
                    TabView {
                        mainCaptionView
                            .tabItem {
                                Image(systemName: "plus.app.fill")
                                Text("ÏÉùÏÑ±")
                            }
                        
                        mainHistoryView
                            .tabItem {
                                Image(systemName: "clock.fill")
                                Text("ÌûàÏä§ÌÜ†Î¶¨")
                            }
                    }
                    // TODO: Î∑∞ ÎßåÎì§Î©¥ Ïó¨Í∏∞ Ïä§ÏúÑÏπòÎ¨∏Ïóê ÎÑ£Ïñ¥Ï£ºÏÑ∏Ïöî
                    .navigationDestination(for: StackViewType.self) { stackViewType in
                        switch stackViewType {
                        case .Menu:
                            MenuView(storeModel: storeModel)
                        case .Daily:
                            DailyView(storeModel: storeModel)
                        case .SettingHome:
                            SettingView(storeModel: storeModel)
                        case .SettingStore:
                            SettingStoreView(storeName: $storeModel.storeName)
                        case .SettingTone:
                            SettingToneView(storeTone: $storeModel.tone)
                        case .CaptionResult:
                            CaptionResultView(storeModel: storeModel)
                        }
                    }
                }
                .navigationBarBackButtonHidden()
                .onAppear{
                    fetchStoreData()
                    viewModel.promptAnswer = "ÏÉùÏÑ±Îêú ÌÖçÏä§Ìä∏Í∞Ä Îì§Ïñ¥Í∞ÄÏöî."
                    resetData()
                }
            }
            
        }
        
    }
}

// MARK: - Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäº
private func NavigationBtn(header: String, description: String,action: @escaping () -> Void) -> some View {
    Button(action: {
        action()
    }) {
        RoundedRectangle(cornerRadius: radius2)
            .frame(maxWidth: .infinity)
            .frame(height: 106)
            .overlay(alignment: .leading) {
                VStack(alignment: .leading,spacing: 8) {
                    Text(header)
                        .font(.title2())
                        .foregroundStyle(Color.gray6)
                    Text(description)
                        .font(.body2Bold())
                        .foregroundStyle(Color.gray4)
                }
                .padding(.horizontal,16)
            }
            .foregroundStyle(Color.sub)
    }
}

// MARK: - ÏÑ§Ï†ï Î≤ÑÌäº
private func SettingBtn(action: @escaping () -> Void) -> some View {
    HStack(alignment: .center) {
        Spacer()
        Button(action: {
            action()
        }, label: {
            Image(systemName: "gearshape")
                .resizable()
                .foregroundStyle(Color.gray5)
                .frame(width: 24,height: 24)
        })
    }
}

extension MainView {
    private var mainCaptionView: some View {
        ContentArea {
            
            VStack(spacing: 28) {
                SettingBtn(action: {pathManager.path.append(.SettingHome)})
                
                VStack(alignment: .leading, spacing: 28) {
                    
                    Text("Ïñ¥Îñ§ Ïπ¥ÌîºÎ•º ÏÉùÏÑ±Ìï†ÍπåÏöî?")
                        .font(.title1())
                    
                    VStack(alignment: .leading, spacing: 12) {
                        
                        Text("Ï∫°ÏÖò")
                            .font(.body2Bold())
                            .foregroundColor(Color.gray4)
                        
                        NavigationBtn(header: "ÏùºÏÉÅ",description: "Í∞ÄÎ≤ºÏö¥ Ïπ¥Ìéò ÏùºÏÉÅ Í∏ÄÏùÑ Ïç®Ïöî", action: {pathManager.path.append(.Daily)})
                        
                        NavigationBtn(header: "Î©îÎâ¥",description: "Ïπ¥ÌéòÏùò Î©îÎâ¥Ïóê ÎåÄÌïú Í∏ÄÏùÑ Ïç®Ïöî", action: {pathManager.path.append(.Menu)})
                    }
                    
                    VStack(alignment: .leading, spacing: 12) {
                        
                        Text("Ìï¥ÏãúÌÉúÍ∑∏")
                            .font(.body2Bold())
                            .foregroundColor(Color.gray4)
                        
                        NavigationBtn(header: "Ìï¥ÏãúÌÉúÍ∑∏",description: "Í∞ÄÎ≤ºÏö¥ Ïπ¥Ìéò ÏùºÏÉÅ Í∏ÄÏùÑ Ïç®Ïöî", action: {
                            //TODO: Ìï¥ÏãúÌÉúÍ∑∏ ÏÉùÏÑ± Î∑∞ ÎßåÎì§Î©¥ Ïó¨Í∏∞Ïóê pathÏ∂îÍ∞ÄÌï¥ Ï£ºÏÑ∏Ïöî!
                        })
                    }
                }
                
                Spacer()
            }
        }
       
    }
    
    private var mainHistoryView: some View {
        ContentArea {
            VStack(alignment: .leading, spacing: 20) {
                
                VStack(alignment: .leading, spacing: 8) {
                    
                    Text("ÌûàÏä§ÌÜ†Î¶¨")
                        .font(.title1())
                        .foregroundColor(Color.gray6)
                    
                    Text("ÌûàÏä§ÌÜ†Î¶¨Î•º ÌÉ≠ÌïòÎ©¥ ÎÇ¥Ïö©Ïù¥ Î≥µÏÇ¨Îê©ÎãàÎã§.")
                        .font(.body2Bold())
                        .foregroundColor(Color.gray4)
                }
                
                VStack(alignment: .leading, spacing: 20) {
                    
                    historyIndicator
                    
                    TabView(selection: $historySelected) {
                        
                        feedHistory
                            .tag("ÌîºÎìú Í∏Ä")
                        
                        hashtagHistory
                            .tag("Ìï¥ÏãúÌÉúÍ∑∏")
                    }
                    .tabViewStyle(.page(indexDisplayMode: .never))
                    
                }
            }
        }
    }
    
    private var historyIndicator: some View {
        HStack(spacing: 16) {
            
            Button(action: {
                historySelected = "ÌîºÎìú Í∏Ä"
            }, label: {
                Text("ÌîºÎìú Í∏Ä")
            })
            
            Button(action: {
                historySelected = "Ìï¥ÏãúÌÉúÍ∑∏"
            }, label: {
                Text("Ìï¥ÏãúÌÉúÍ∑∏")
            })
        }
    }
    
    private var feedHistory: some View {
        VStack {
            feedHisoryDetail(tag: "ÏùºÏÉÅ", date: Date(), content: "Íµ¨Î¶ÑÏù¥ Í∞ÄÎìùÌïú ÌïòÎäòÏù¥ ÎÇ¥ Í∏∞Î∂ÑÍ≥º Îî± ÎßûÏïÑ!\nÏåÄÏåÄÌïú ÎÇ†Ïî®ÏóêÎäî ÏöîÍ±∞Ìä∏ ÌîÑÎùºÌë∏ÏπòÎÖ∏Í∞Ä ÏµúÍ≥†ÏßÄüå•Ô∏è‚ùÑÔ∏è\nÎú®Í±∞Ïö¥ Ïª§ÌîºÎ≥¥Îã§Îäî ÏÉÅÌÅºÌïú ÏöîÍ±∞Ìä∏ÏôÄ ÏñºÏùåÏù¥ Ïñ¥Ïö∞Îü¨ÏßÑ Ïù¥ ÏùåÎ£å, Í≤®Ïö∏ ÎÇ†Ïî®ÏóêÎèÑ ÎÇ¥ ÎßàÏùåÏùÑ ÎÖπÏùº Ïàò ÏûàÏñ¥. Ìïú Î™®Í∏àÏóê Ïã†ÏÑ†Ìïú ÎßõÏù¥ ÎäêÍª¥ÏßÄÎäî Ïù¥ ÏàúÍ∞Ñ!")
        }
    }
    
    // TODO: Ìï¥ÏãúÌÉúÍ∑∏ ÌûàÏä§ÌÜ†Î¶¨Îäî Ïó¨Í∏∞Ïóê ÏûëÏóÖÌï¥Ï£ºÏÑ∏Ïöî
    private var hashtagHistory: some View {
        VStack {
            
        }
    }
    
    private func feedHisoryDetail(tag: String, date: Date, content: String) -> some View {
        RoundedRectangle(cornerRadius: radius1)
            .frame(height: 160)
            .foregroundColor(Color.gray1)
            .overlay(alignment: .leading) {
                VStack(alignment: .leading, spacing: 8) {
                    
                    HStack(spacing: 0) {
                        
                        Text(tag)
                            .font(.body2Bold())
                            .foregroundColor(Color.white)
                            .padding(.horizontal, 9.5)
                            .clipShape(RoundedRectangle(cornerRadius: 8))
                            .background(Color.main)
                            .overlay {
                                RoundedRectangle(cornerRadius: 8)
                                    .foregroundColor(.clear)
                            }
            
                        Spacer()
                        
                        Text(date, style: .date)
                            .font(.body2Bold())
                            .foregroundColor(Color.gray4)
                    }
                    
                    Text(content)
                        .font(.body2Bold())
                        .foregroundColor(Color.gray5)
                    
                }
                .padding(EdgeInsets(top: 24, leading: 16, bottom: 24, trailing: 16))
            }
    }
}

extension MainView : MainViewProtocol {
    
    func resetData() {
        
    }
    
    func fetchStoreData() {
        let storeRequest = NSFetchRequest<StoreData>(entityName: "StoreData")
        
        do {
            let storeDataArray = try coreDataManager.context.fetch(storeRequest)
            if let storeCoreData = storeDataArray.last {
                self.storeModel.storeName = storeCoreData.storeName ?? ""
                // TODO: ÏΩîÏñ¥Îç∞Ïù¥ÌÑ∞ Ìï®Ïàò Î≥ÄÍ≤Ω ÌïÑÏöî
                self.storeModel.tone = storeCoreData.tones ?? ["Í∏∞Î≥∏"]
            }
        } catch {
            print("ERROR STORE CORE DATA")
            print(error.localizedDescription)
        }
    }
    
}
